# -*- coding: utf-8 -*-
"""
/***************************************************************************
 PanoramaViewerDialog
                                 A QGIS plugin
 A simple panorama viewer for QGIS. Based on QWebView with Pannellum js library
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2023-05-26
        git sha              : $Format:%H$
        copyright            : (C) 2023 by Pavel Pereverzev
        email                : pasha004@yandex.ru
 ***************************************************************************/

/***************************************************************************
 * *
 * This program is free software; you can redistribute it and/or modify  *
 * it under the terms of the GNU General Public License as published by  *
 * the Free Software Foundation; either version 2 of the License, or     *
 * (at your option) any later version.                                   *
 * *
 ***************************************************************************/
"""
import os
import json 
import math 
import requests

from http.server import HTTPServer, SimpleHTTPRequestHandler
from urllib.parse import urlparse

from qgis.utils import iface
from qgis._core import *
from qgis._gui import *


from PyQt5.QtWebKitWidgets import QWebView, QWebPage
from PyQt5 import *
from PyQt5 import QtCore
from PyQt5.QtWidgets import (
    QVBoxLayout,
    QWidget,
    QCheckBox,
    QHBoxLayout,
    QGridLayout,
    QPushButton,
    QMessageBox,
    QProgressBar,
    QDockWidget,
    QComboBox,
    QMainWindow,
    QSizePolicy,
    QStyle,
    QLabel
)
from PyQt5.QtGui import *
from PyQt5.QtCore import *

from PyQt5.QtGui import QSurfaceFormat
format = QSurfaceFormat()
format.setProfile(QSurfaceFormat.CompatibilityProfile)
QSurfaceFormat.setDefaultFormat(format)

from qgis.core import QgsVectorLayer, QgsProject, QgsFeatureRequest
from PyQt5.QtWidgets import QLineEdit
from PyQt5.QtCore import QUrl
import requests

base_folder = os.path.dirname(os.path.realpath(__file__))

HOST, PORT = "", 8030

def circle_geom(pnt, w, h):
    list_circle =[]
    for i in range(0,36):
        an =math.radians(i * 10)
        np_x = pnt.x() + (w* math.sin(an))
        np_y = pnt.y() + (h* math.cos(an))
        pnt_new = QgsPointXY(np_x,np_y) 
        list_circle.append(pnt_new) 
    ellipse_geom = QgsGeometry.fromPolygonXY([list_circle])
    return ellipse_geom


def read_in_chunks(file_object, chunk_size=None):
    while True:
        data = file_object.read(chunk_size)
        if not data:
            break
        yield data


class GetPanorama(QWidget):
    def __init__(self, parent):
        super().__init__()
        self.main_app = parent

    def get_pano_file(self, file_url, method):
        if method == "download":
            result = self.download(file_url)
        else:
            result = self.copy_file(file_url)
        return result

    def download(self, url):
        self.main_app.pbar.setDisabled(False)
        r = requests.get(url, allow_redirects=True, stream=True)
        if r.status_code != 200:
            return False
        total_length = r.headers.get("content-length")
        if total_length is None: # No content length header
            return False
        total_length = int(total_length)
        file_name = os.path.join(base_folder, "image.JPG")
        if total_length: 
            with open(file_name, "wb") as f:
                p_step = 100 / total_length * 4096 if total_length > 0 else 0
                counter = 0
                for data in r.iter_content(chunk_size=4096):
                    counter += p_step
                    f.write(data)
                    self.main_app.pbar.setValue(int(counter))
                    QtCore.QCoreApplication.processEvents()
        self.main_app.pbar.setValue(0)
        self.main_app.pbar.setDisabled(True)
        return True

    def copy_file(self, file_in):
        self.main_app.pbar.setDisabled(False)
        file_out = os.path.join(base_folder, "image.JPG")
        file_stats = os.stat(file_in)
        size_b = file_stats.st_size
        ch_optimal_size = int(size_b / 100) if size_b > 100 else size_b
        p_step = 100 / size_b * ch_optimal_size if size_b > 0 else 0
        counter = 0
        open(file_out, "w").close()
        with open(file_in, "rb") as f:
            for piece in read_in_chunks(f, ch_optimal_size):
                with open(file_out, "ab") as fout:
                    fout.write(piece)
                counter += p_step
                self.main_app.pbar.setValue(int(counter))
                QtCore.QCoreApplication.processEvents()
        self.main_app.pbar.setValue(0)
        self.main_app.pbar.setDisabled(True)
        return True


class QuietHandler(SimpleHTTPRequestHandler):
    def log_message(self, format, *args):
        pass


class HttpDaemon(QtCore.QThread):
    def __init__(self, parent, path):
        super(QThread, self).__init__()
        self.server_path = path

    def run(self):
        os.chdir(self.server_path)
        self.server = HTTPServer((HOST, PORT), QuietHandler)
        self.server.serve_forever()

    def stop(self):
        self.server.shutdown()
        self.server.socket.close()


class PanoramaViewerDialog(QDockWidget):
    def __init__(self, wrapper):
        QDockWidget.__init__(self)
        self.wrapper = wrapper
        self.resize(480, 480)
        self.setWindowTitle("Salvador 360°")
        self.gv = PanoramaViewer(self)
        self.gv.setMinimumSize(QSize(480, 480))
        self.setWidget(self.gv)
        self.closeEvent = self.onDestroy
        self.wrapper.plugin_is_opened = True

    def onDestroy(self, e):
        self.wrapper.plugin_is_opened = False
        self.gv.reset_tr()
        iface.mapCanvas().selectionChanged.disconnect(self.gv.get_pic_on_selection)
        if self.gv.rubberBandArrow:
            self.gv.rubberBandArrow.reset()


class WebPage(QWebPage):
    def __init__(self, main_view):
        super().__init__()
        self.mv = main_view
    def javaScriptConsoleMessage(self, msg, line, source):
        try:
            data = json.loads(msg)
            self.mv.update_arrow(data)
        except json.JSONDecodeError:
            pass


class PanoramaViewer(QMainWindow):
    def __init__(self, parent):
        super().__init__(parent=None)
        
        self.wrapper = parent
        self.setWindowFlags(self.windowFlags() | QtCore.Qt.WindowStaysOnTopHint)
        self.setWindowTitle("Salvador 360°")
        self.setGeometry(800, 650, 1200, 880)

        self.httpd = None
        self.current_layer = None

        centralWidget = QWidget()
        browser_layout = QHBoxLayout()
        centralLayout = QVBoxLayout()
        control_layout = QVBoxLayout()
        grid_layout = QGridLayout(self)
        grid_layout.setSpacing(10)

        self.view = QWebView(self)
        sp = self.view.sizePolicy()
        sp.setVerticalPolicy(QSizePolicy.Expanding)
        self.view.setSizePolicy(sp)
        self.view.settings().setObjectCacheCapacities(0, 0, 0)
        self.page = WebPage(self)
        self.view.setPage(self.page)

        self.lbl_bairro = QLabel("Bairro:")
        self.cmb_bairro = QComboBox()
        self.cmb_bairro.setEditable(True)

        self.lbl_logradouro = QLabel("Logradouro (Codlog):")
        self.cmb_logradouro = QComboBox()
        self.cmb_logradouro.setEditable(True)

        self.btn_exibir_pontos = QPushButton("Exibir pontos de panorama")
        self.pbar = QProgressBar()
        self.pbar.setDisabled(True)

        browser_layout.addWidget(self.view)
        
        grid_layout.addWidget(self.lbl_bairro, 1, 0)
        grid_layout.addWidget(self.cmb_bairro, 1, 1)
        grid_layout.addWidget(self.lbl_logradouro, 1, 2)
        grid_layout.addWidget(self.cmb_logradouro, 1, 3)

        control_layout.addWidget(self.btn_exibir_pontos)
        control_layout.addWidget(self.pbar)

        centralLayout.addLayout(browser_layout)
        centralLayout.addLayout(grid_layout)
        centralLayout.addLayout(control_layout)
        centralWidget.setLayout(centralLayout)
        self.setCentralWidget(centralWidget)

        self.btn_exibir_pontos.clicked.connect(self.exibir_pontos_panorama)
        self.cmb_bairro.currentIndexChanged.connect(self.carregar_logradouros)

        self.carregar_bairros()
        
        iface.mapCanvas().selectionChanged.connect(self.visualizar_panorama_selecionado)

        self.httpd = HttpDaemon(self, base_folder)
        self.httpd.start()

    def update_arrow(self, data):
        if not self.show_directrions.isChecked():
            return 
        angle = float(data.get('yaw', 0)) 
        zoom = float(data.get('zoom', 0)) 

        self.yaw = 0.0 if not self.yaw else self.yaw
        yaw = 1/float(self.yaw)*50 if self.yaw != 0 else 1
        yaw = zoom * 0.6

        side_w = self.canvas.scale()/250 + self.canvas.scale()/yaw/5 if yaw != 0 else self.canvas.scale()/250
        side_w_plus = self.canvas.scale()/450
        d = self.canvas.scale()/10
        pnt = QgsPointXY(self.x, self.y)
        geom_bigger = circle_geom(pnt, side_w, side_w)
        geom_smaller = circle_geom(pnt, side_w_plus, side_w_plus)
        diff = geom_bigger.difference(geom_smaller)

        lst_pnts = [
            QgsPointXY(pnt.x()+d*math.sin(math.radians(angle-yaw)), pnt.y()+d*math.cos(math.radians(angle-yaw))),
            QgsPointXY(pnt.x(), pnt.y()),
            QgsPointXY(pnt.x()+d*math.sin(math.radians(angle+yaw)), pnt.y()+d*math.cos(math.radians(angle+yaw))),
            QgsPointXY(pnt.x()+d*10*math.sin(math.radians(angle)), pnt.y()+d*10*math.cos(math.radians(angle))),
        ]
        geom_polygon = QgsGeometry().fromPolygonXY([lst_pnts])
        new_diff = geom_polygon.intersection(diff)

        self.rubberBandArrow.reset()
        self.rubberBandArrow.setToGeometry(new_diff)

    def reset_tr(self):
        self.btn_find_panorama.setChecked(False)
        self.rubberBandArrow.reset()
        if self.httpd:
            self.httpd.stop()

    def get_pic_on_selection(self):
        self.get_pic()
        
    def load_layers(self):
        self.cmb_bairro_layer.clear()
        self.cmb_pontos_layer.clear()
        
        layers = QgsProject.instance().mapLayers().values()
        
        polygon_layers = [layer for layer in layers if layer.geometryType() == QgsWkbTypes.PolygonGeometry and type(layer) == QgsVectorLayer and layer.isValid()]
        point_layers = [layer for layer in layers if layer.geometryType() == QgsWkbTypes.PointGeometry and type(layer) == QgsVectorLayer and layer.isValid()]

        for layer in polygon_layers:
            self.cmb_bairro_layer.addItem(layer.name(), layer)
            
        for layer in point_layers:
            self.cmb_pontos_layer.addItem(layer.name(), layer)
        
        pontos_layer = self.cmb_pontos_layer.currentData()
        if pontos_layer:
            pontos_layer.setSubsetString("")

    def populate_bairro_fields(self):
        layer = self.cmb_bairro_layer.currentData()
        self.cmb_bairro_field.clear()
        if layer:
            fields = [field.name() for field in layer.fields()]
            self.cmb_bairro_field.addItems(fields)

    def populate_pontos_fields(self):
        layer = self.cmb_pontos_layer.currentData()
        self.cmb_pontos_bairro_field.clear()
        self.cmb_pontos_url_field.clear()
        if layer:
            fields = [field.name() for field in layer.fields()]
            self.cmb_pontos_bairro_field.addItems(fields)
            self.cmb_pontos_url_field.addItems(fields)

    def populate_bairro_selector(self):
        layer = self.cmb_bairro_layer.currentData()
        field_name = self.cmb_bairro_field.currentText()
        self.cmb_bairro_select.clear()
        
        if layer and field_name:
            self.cmb_bairro_select.addItem("Todos")
            unique_values = layer.uniqueValues(layer.fields().indexFromName(field_name))
            self.cmb_bairro_select.addItems(sorted(list(unique_values)))

    def filter_points_by_neighborhood(self):
        pontos_layer = self.cmb_pontos_layer.currentData()
        pontos_field = self.cmb_pontos_bairro_field.currentText()
        selected_bairro = self.cmb_bairro_select.currentText()

        if not pontos_layer or not pontos_field:
            return

        if selected_bairro == "Todos" or not selected_bairro:
            pontos_layer.setSubsetString("")
        else:
            # CORREÇÃO APLICADA AQUI
            filter_expression = f'"{pontos_field}" = \'{selected_bairro}\''
            pontos_layer.setSubsetString(filter_expression)
        
        iface.mapCanvas().refresh()

    def get_pic(self):
        self.rubberBandArrow.reset()
        
        pontos_layer = self.cmb_pontos_layer.currentData()
        url_field = self.cmb_pontos_url_field.currentText()

        if not pontos_layer or not url_field:
            return

        selected_features = pontos_layer.selectedFeatures()
        if not selected_features:
            self.view.setUrl(QUrl("about:blank"))
            return

        field_idx = pontos_layer.fields().indexFromName(url_field)
        current_feature = selected_features[0]
        cf_attr = current_feature.attributes()[field_idx]

        if not cf_attr:
            return

        cf_geom = current_feature.geometry().centroid()
        transform_crs = QgsCoordinateTransform(pontos_layer.crs(), QgsProject.instance().crs(), QgsProject.instance().transformContext())
        cf_geom.transform(transform_crs)
        self.x = cf_geom.asPoint().x()
        self.y = cf_geom.asPoint().y()
        
        result = urlparse(cf_attr)
        img_get = False

        if os.path.isfile(cf_attr):
            img_get = GetPanorama(self).get_pano_file(cf_attr, "copy")
        elif all([result.scheme, result.netloc]):
            img_get = GetPanorama(self).get_pano_file(cf_attr, "download")
        else:
            pass
        
        if img_get:
            self.view.load(QUrl("http://localhost:8030/index_local.html"))
        else:
            self.view.load(QUrl("http://localhost:8030/index_error.html"))
        return