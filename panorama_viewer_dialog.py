# -*- coding: utf-8 -*-
"""
/***************************************************************************
 PanoramaViewerDialog
                                 A QGIS plugin
 A simple panorama viewer for QGIS. Based on QWebView with Pannellum js library
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2023-05-26
        git sha              : $Format:%H$
        copyright            : (C) 2023 by Pavel Pereverzev
        email                : pasha004@yandex.ru
 ***************************************************************************/

/***************************************************************************
 * *
 * This program is free software; you can redistribute it and/or modify  *
 * it under the terms of the GNU General Public License as published by  *
 * the Free Software Foundation; either version 2 of the License, or     *
 * (at your option) any later version.                                   *
 * *
 ***************************************************************************/
"""
import os
import json 
import math 
import requests

from http.server import HTTPServer, SimpleHTTPRequestHandler
from urllib.parse import urlparse

from qgis.utils import iface
from qgis._core import *
from qgis._gui import *

from qgis.core import QgsPointXY, QgsGeometry
from PyQt5.QtCore import QThread, QSize


from PyQt5.QtWebKitWidgets import QWebView, QWebPage
from PyQt5 import *
from PyQt5 import QtCore
from PyQt5.QtWidgets import (
    QVBoxLayout,
    QWidget,
    QCheckBox,
    QHBoxLayout,
    QGridLayout,
    QPushButton,
    QMessageBox,
    QProgressBar,
    QDockWidget,
    QComboBox,
    QMainWindow,
    QSizePolicy,
    QStyle,
    QLabel
)
from PyQt5.QtGui import *
from PyQt5.QtCore import *

from PyQt5.QtGui import QSurfaceFormat
format = QSurfaceFormat()
format.setProfile(QSurfaceFormat.CompatibilityProfile)
QSurfaceFormat.setDefaultFormat(format)

from qgis.core import QgsVectorLayer, QgsProject, QgsFeatureRequest
from PyQt5.QtWidgets import QLineEdit
from PyQt5.QtCore import QUrl
import requests

base_folder = os.path.dirname(os.path.realpath(__file__))

HOST, PORT = "", 8030

def circle_geom(pnt, w, h):
    list_circle =[]
    for i in range(0,36):
        an =math.radians(i * 10)
        np_x = pnt.x() + (w* math.sin(an))
        np_y = pnt.y() + (h* math.cos(an))
        pnt_new = QgsPointXY(np_x,np_y) 
        list_circle.append(pnt_new) 
    ellipse_geom = QgsGeometry.fromPolygonXY([list_circle])
    return ellipse_geom


def read_in_chunks(file_object, chunk_size=None):
    while True:
        data = file_object.read(chunk_size)
        if not data:
            break
        yield data


class GetPanorama(QWidget):
    def __init__(self, parent):
        super().__init__()
        self.main_app = parent

    def get_pano_file(self, file_url, method):
        if method == "download":
            result = self.download(file_url)
        else:
            result = self.copy_file(file_url)
        return result

    def download(self, url):
        self.main_app.pbar.setDisabled(False)
        r = requests.get(url, allow_redirects=True, stream=True)
        if r.status_code != 200:
            return False
        total_length = r.headers.get("content-length")
        if total_length is None: # No content length header
            return False
        total_length = int(total_length)
        file_name = os.path.join(base_folder, "image.JPG")
        if total_length: 
            with open(file_name, "wb") as f:
                p_step = 100 / total_length * 4096 if total_length > 0 else 0
                counter = 0
                for data in r.iter_content(chunk_size=4096):
                    counter += p_step
                    f.write(data)
                    self.main_app.pbar.setValue(int(counter))
                    QtCore.QCoreApplication.processEvents()
        self.main_app.pbar.setValue(0)
        self.main_app.pbar.setDisabled(True)
        return True

    def copy_file(self, file_in):
        self.main_app.pbar.setDisabled(False)
        file_out = os.path.join(base_folder, "image.JPG")
        file_stats = os.stat(file_in)
        size_b = file_stats.st_size
        ch_optimal_size = int(size_b / 100) if size_b > 100 else size_b
        p_step = 100 / size_b * ch_optimal_size if size_b > 0 else 0
        counter = 0
        open(file_out, "w").close()
        with open(file_in, "rb") as f:
            for piece in read_in_chunks(f, ch_optimal_size):
                with open(file_out, "ab") as fout:
                    fout.write(piece)
                counter += p_step
                self.main_app.pbar.setValue(int(counter))
                QtCore.QCoreApplication.processEvents()
        self.main_app.pbar.setValue(0)
        self.main_app.pbar.setDisabled(True)
        return True


class QuietHandler(SimpleHTTPRequestHandler):
    def log_message(self, format, *args):
        pass


class HttpDaemon(QtCore.QThread):
    def __init__(self, parent, path):
        super(QThread, self).__init__()
        self.server_path = path

    def run(self):
        os.chdir(self.server_path)
        self.server = HTTPServer((HOST, PORT), QuietHandler)
        self.server.serve_forever()

    def stop(self):
        self.server.shutdown()
        self.server.socket.close()


class PanoramaViewerDialog(QDockWidget):
    def __init__(self, wrapper):
        QDockWidget.__init__(self)
        self.wrapper = wrapper
        self.resize(480, 480)
        self.setWindowTitle("Salvador 360°")
        self.gv = PanoramaViewer(self)
        self.gv.setMinimumSize(QSize(480, 480))
        self.setWidget(self.gv)
        self.closeEvent = self.onDestroy
        self.wrapper.plugin_is_opened = True

    def onDestroy(self, e):
        self.wrapper.plugin_is_opened = False
        self.gv.reset_tr()
        iface.mapCanvas().selectionChanged.disconnect(self.gv.get_pic_on_selection)
        if self.gv.rubberBandArrow:
            self.gv.rubberBandArrow.reset()


class WebPage(QWebPage):
    def __init__(self, main_view):
        super().__init__()
        self.mv = main_view
    def javaScriptConsoleMessage(self, msg, line, source):
        try:
            data = json.loads(msg)
            self.mv.update_arrow(data)
        except json.JSONDecodeError:
            pass


class PanoramaViewer(QMainWindow):
    def __init__(self, parent):
        super().__init__(parent=None)
        
        self.wrapper = parent
        self.setWindowFlags(self.windowFlags() | QtCore.Qt.WindowStaysOnTopHint)
        self.setWindowTitle("Salvador 360°")
        self.setGeometry(800, 650, 1200, 880)

        self.httpd = None
        self.current_layer = None

        centralWidget = QWidget()
        browser_layout = QHBoxLayout()
        centralLayout = QVBoxLayout()
        control_layout = QVBoxLayout()
        grid_layout = QGridLayout(self)
        grid_layout.setSpacing(10)

        self.view = QWebView(self)
        sp = self.view.sizePolicy()
        sp.setVerticalPolicy(QSizePolicy.Expanding)
        self.view.setSizePolicy(sp)
        self.view.settings().setObjectCacheCapacities(0, 0, 0)
        self.page = WebPage(self)
        self.view.setPage(self.page)

        self.lbl_bairro = QLabel("Bairro:")
        self.cmb_bairro = QComboBox()
        self.cmb_bairro.setEditable(True)

        self.lbl_logradouro = QLabel("Logradouro (Codlog):")
        self.cmb_logradouro = QComboBox()
        self.cmb_logradouro.setEditable(True)

        self.btn_exibir_pontos = QPushButton("Exibir pontos de panorama")
        self.pbar = QProgressBar()
        self.pbar.setDisabled(True)

        browser_layout.addWidget(self.view)
        
        grid_layout.addWidget(self.lbl_bairro, 1, 0)
        grid_layout.addWidget(self.cmb_bairro, 1, 1)
        grid_layout.addWidget(self.lbl_logradouro, 1, 2)
        grid_layout.addWidget(self.cmb_logradouro, 1, 3)

        control_layout.addWidget(self.btn_exibir_pontos)
        control_layout.addWidget(self.pbar)

        centralLayout.addLayout(browser_layout)
        centralLayout.addLayout(grid_layout)
        centralLayout.addLayout(control_layout)
        centralWidget.setLayout(centralLayout)
        self.setCentralWidget(centralWidget)

        self.btn_exibir_pontos.clicked.connect(self.exibir_pontos_panorama)
        self.cmb_bairro.currentIndexChanged.connect(self.carregar_logradouros)

        self.carregar_bairros()
        
        iface.mapCanvas().selectionChanged.connect(self.visualizar_panorama_selecionado)

        self.httpd = HttpDaemon(self, base_folder)
        self.httpd.start()

    def carregar_bairros(self):
        """
        Conecta ao WFS da camada de bairros e popula o combobox.
        """
        # URL com o typeName CORRETO extraído do XML
        uri = "http://geoserver.sedur.salvador.ba.gov.br:8080/geoserver/bairro_oficial/ows?service=WFS&version=1.0.0&request=GetFeature&typeName=bairro_oficial:VM_BAIRRO_OFICIAL"
        self.layer_bairros = QgsVectorLayer(uri, "Bairros", "WFS")

        if not self.layer_bairros.isValid() or self.layer_bairros.featureCount() == 0:
            QMessageBox.critical(self, "Erro de Conexão",
                                "Não foi possível carregar a camada de bairros do serviço WFS.\n\n"
                                "Verifique a URL e sua conexão com a internet.\n"
                                f"URL tentada: {uri}")
            return

        field_name = "nome"  # Nome do campo que contém o nome do bairro

        self.cmb_bairro.clear()
        
        try:
            bairros_set = set(f[field_name] for f in self.layer_bairros.getFeatures())
            bairros = sorted(list(bairros_set))
            self.cmb_bairro.addItems(bairros)
        except Exception as e:
            QMessageBox.critical(self, "Erro ao ler dados",
                                f"Não foi possível ler os nomes dos bairros. "
                                f"Verifique se o campo '{field_name}' existe.\n\nErro: {e}")

    def carregar_logradouros(self):
        """
        Filtra os logradouros com base no bairro selecionado, destaca o bairro no mapa e popula o combobox.
        """
        bairro_selecionado = self.cmb_bairro.currentText()
        if not bairro_selecionado:
            self.cmb_logradouro.clear()
            return

        # Limpa camadas e seleções anteriores
        for layer in QgsProject.instance().mapLayers().values():
            if layer.name() in ["Bairro Selecionado", "Logradouros do Bairro", "Pontos de Panorama"]:
                QgsProject.instance().removeMapLayer(layer.id())
        self.cmb_logradouro.clear()

        # Adiciona e destaca o polígono do bairro selecionado usando o typeName correto
        uri_bairros = f"http://geoserver.sedur.salvador.ba.gov.br:8080/geoserver/bairro_oficial/ows?service=WFS&version=1.0.0&request=GetFeature&typeName=bairro_oficial:VM_BAIRRO_OFICIAL&cql_filter=\"nome\"='{bairro_selecionado}'"
        layer_bairro_selecionado = QgsVectorLayer(uri_bairros, "Bairro Selecionado", "WFS")
        
        if layer_bairro_selecionado.isValid() and layer_bairro_selecionado.featureCount() > 0:
            QgsProject.instance().addMapLayer(layer_bairro_selecionado)
            iface.mapCanvas().setExtent(layer_bairro_selecionado.extent())
            iface.mapCanvas().refresh()
            geom_bairro = next(layer_bairro_selecionado.getFeatures()).geometry()
        else:
            QMessageBox.warning(self, "Atenção", "Não foi possível encontrar a geometria para o bairro selecionado.")
            return

        # Carrega os logradouros que intersectam a geometria do bairro
        uri_logradouros = "http://geoserver.sedur.salvador.ba.gov.br:8080/geoserver/logradouros/ows?service=WFS&version=1.0.0&request=GetFeature&typeName=logradouros:LOGRADOUROS_EIXO"
        layer_logradouros = QgsVectorLayer(uri_logradouros, "Logradouros do Bairro (WFS)", "WFS")

        if not layer_logradouros.isValid():
            QMessageBox.critical(self, "Erro", "Não foi possível carregar a camada de logradouros.")
            return

        request = QgsFeatureRequest().setFilterRect(geom_bairro.boundingBox())
        
        codlogs = set()
        for f in layer_logradouros.getFeatures(request):
            if f.geometry().intersects(geom_bairro):
                # Assumindo que o nome do campo é 'cd_codlog'
                codlogs.add(str(f["cd_codlog"]))
        
        self.cmb_logradouro.addItems(sorted(list(codlogs)))

    def exibir_pontos_panorama(self):
        """
        Carrega e exibe os pontos de panorama para o logradouro selecionado.
        """
        codlog_selecionado = self.cmb_logradouro.currentText()
        if not codlog_selecionado:
            QMessageBox.warning(self, "Atenção", "Por favor, selecione um logradouro.")
            return

        # Limpa camadas anteriores de panorama
        for layer in QgsProject.instance().mapLayers().values():
            if layer.name() == "Pontos de Panorama":
                QgsProject.instance().removeMapLayer(layer)

        # URL do WFS da camada de panoramas (substitua pela URL correta)
        # Assumindo que a camada se chama 'pontos_panorama' e o campo é 'codlog'
        uri_panoramas = f"http://geoserver.sedur.salvador.ba.gov.br/geoserver/sedur/ows?service=WFS&version=1.0.0&request=GetFeature&typeName=sedur:pontos_panorama&cql_filter=\"codlog\"='{codlog_selecionado}'"
        
        self.current_layer = QgsVectorLayer(uri_panoramas, "Pontos de Panorama", "WFS")

        if not self.current_layer.isValid() or self.current_layer.featureCount() == 0:
            QMessageBox.information(self, "Informação", f"Nenhum ponto de panorama encontrado para o codlog: {codlog_selecionado}")
            return
        
        # Carrega o estilo do arquivo QML que você forneceu
        style_file = os.path.join(base_folder, 'point_styles.qml')
        if os.path.exists(style_file):
            self.current_layer.loadNamedStyle(style_file)

        QgsProject.instance().addMapLayer(self.current_layer)
        iface.mapCanvas().setExtent(self.current_layer.extent())
        iface.mapCanvas().refresh()

    def visualizar_panorama_selecionado(self):
        """
        Exibe o panorama quando um ponto é selecionado no mapa.
        """
        layer = self.current_layer
        if not layer or not isinstance(layer, QgsVectorLayer):
            return

        selected_features = layer.selectedFeatures()
        if not selected_features:
            self.view.setUrl(QUrl("about:blank"))
            return

        # Lógica para obter a URL da imagem e exibi-la